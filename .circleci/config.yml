version: 2.1
workflows:
  build:
    jobs:
      - build:
          context: Chipserver
jobs:
  build:
    environment:
      TAG: latest
      REPO_NAME: go-boilerplate
      ORG_NAME: anant-sharma
    docker:
      # specify the version
      - image: golang:alpine

    working_directory: /go/src/github.com/{{ORG_NAME}}/{{REPO_NAME}}
    steps:
      - run:
          name: Install Dependencies
          command: apk add curl jq docker-cli git

      - checkout

      # - run:
      #     name: Get Application Modules
      #     command: go get -v -t -d ./...

      # - run:
      #     name: Run Tests
      #     command: go test -v ./...

      - setup_remote_docker:
          docker_layer_caching: false

      - run:
          name: Notify Build State
          command: |
            curl -XPOST $SLACK_WEBHOOK -d "{\"text\": \"Build Started for ${DOCKER_USER}/${REPO_NAME}\"}"

      - run:
          name: Build Docker Image
          command: docker build -t $DOCKER_USER/$REPO_NAME:$TAG .

      - run:
          name: Docker Login
          command: echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin

      - run:
          name: Publish Docker Image
          command: docker push $DOCKER_USER/$REPO_NAME:$TAG

      - run:
          name: Notify Image Published
          command: |
            curl -XPOST $SLACK_WEBHOOK -d "{\"text\": \"Build Published for ${DOCKER_USER}/${REPO_NAME}\"}"

      - run:
          name: Deploy to Chip Cluster
          command: |
            AUTH_TOKEN=$(curl -XPOST ${CLUSTER_API_URL}/auth -d "{\"Username\":\"${CLUSTER_USER}\",\"Password\":\"${CLUSTER_PASS}\"}" | jq -r '.jwt')
            curl -N -XPOST ${CLUSTER_API_URL}/endpoints/1/docker/images/create?fromImage=${DOCKER_USER}/${REPO_NAME}\&tag=${TAG} --header "Authorization: Bearer ${AUTH_TOKEN}"
            curl -XPOST ${CLUSTER_API_URL}/endpoints/1/docker/containers/${REPO_NAME}/restart --header "Authorization: Bearer ${AUTH_TOKEN}"

      - run:
          name: Notify Image Deployed
          command: |
            curl -XPOST $SLACK_WEBHOOK -d "{\"text\": \"Build Deployed for ${DOCKER_USER}/${REPO_NAME}\"}"
